<?xml version="1.0" encoding="UTF-8"?>
<!--
  Source: http://www.sphericalice.com/romhacking/documents/script/index.html
  Param-Types:
      condition:          A conditen of a recently called comparsion
      byte:               A byte-value
      hword:              A 2-byte-value
      word:               A 4-byte-value
      bank:               A so-called script bank
      var:                A variable located in the player's save-file
      hwordvar:           Acts like a var. It will act like an hword if the given var doesn't exist
      [new] bytevar:      A byte-value or a variable containing a byte
      flag:               A var which contains a flag-number or a flag-number
      
      code:               A pointer which points at another script.
      asm:                A pointer which points at an ASM-Code
-->
<scripty>
  <commands>
    <command>
      <id>00</id>
      <name>nop</name>
      <description>Does nothing.</description>
      <params></params>
    </command>
    <command>
      <id>01</id>
      <name>nop1</name>
      <description>Does nothing.</description>
      <params></params>
    </command>
    <command>
      <id>02</id>
      <name>end</name>
      <description>Terminates script execution.</description>
      <params></params>
    </command>
    <command>
      <id>03</id>
      <name>return</name>
      <description>
        Jumps back to after the last-executed <see id="04">call</see> statement, and coninues script execution from there.
      </description>
      <params></params>
    </command>
    <command>
      <id>04</id>
      <name>call</name>
      <description>
        Jumps to destination and continues script execution from there. The location of the calling script is remembered and can be <see id="03">return</see>ed to later.

        The maximum script depth (that is, the maximum nested calls you can make) is 20. When this limit is reached, the game starts treating call as <see id="05">goto</see>.
      </description>
      <params>
        <code>
          <name>destination</name>
          <description>Offset of the script to call.</description>
        </code>
      </params>
    </command>
    <command>
      <id>05</id>
      <name>goto</name>
      <description>Jumps to destination and continues script execution from there.</description>
      <params>
        <code>
          <name>destination</name>
          <description>Offset of the script to call.</description>
        </code>
      </params>
    </command>
    <!-- ToDo http://www.sphericalice.com/romhacking/documents/script/index.html#c-06 -->
    <!-- ToDo http://www.sphericalice.com/romhacking/documents/script/index.html#c-07 -->
    <command>
      <id>08</id>
      <name>gotostd</name>
      <description>Jumps to the standard function at index function.</description>
      <params>
        <byte>
          <name>function</name>
          <description>Index of the standard function to call.</description>
        </byte>
      </params>
    </command>
    <command>
      <id>09</id>
      <name>callstd</name>
      <description>Calls the standard function at index function.</description>
      <params>
        <byte>
          <name>function</name>
          <description>Index of the standard function to call.</description>
        </byte>
      </params>
    </command>
    <command>
      <id>0A</id>
      <name>gotostdif</name>
      <description>If the result of the last comparison matches condition, jumps to the standard function at index function.</description>
      <params>
        <condition>
          <name>condition</name>
          <description>The last comparsion's condition.</description>
        </condition>
        <byte>
          <name>function</name>
          <description>Index of the standard function to call.</description>
        </byte>
      </params>
    </command>
    <command>
      <id>0B</id>
      <name>callstdif</name>
      <description>If the result of the last comparison matches condition, calls the standard function at index function.</description>
      <params>
        <condition>
          <name>condition</name>
          <description>The last comparsion's condition.</description>
        </condition>
        <byte>
          <name>function</name>
          <description>Index of the standard function to call.</description>
        </byte>
      </params>
    </command>
    <!-- needs to be researched -->
    <command>
      <id>0C</id>
      <name>jumpram</name>
      <description>Executes a script stored in a default RAM location.</description>
      <params></params>
    </command>
    <command>
      <id>0D</id>
      <name>killscript</name>
      <description>Terminates script execution and "resets the script RAM".</description>
      <params></params>
    </command>
    <!-- needs to be researched -->
    <command>
      <id>0E</id>
      <name>setbyte</name>
      <description>Pads the specified value to a dword, and then writes that dword to a predefined address (0x0203AAA8).</description>
      <params>
        <byte>
          <name>value</name>
          <description>The value to write.</description>
        </byte>
      </params>
    </command>
    <!-- originally this command's called "loadpointer" -->
    <command>
      <id>0F</id>
      <name>setbank</name>
      <description>Sets the specified script bank to value.</description>
      <params>
        <bank>
          <name>destination</name>
          <description>The bank to write the word to.</description>
        </bank>
        <word>
          <name>value</name>
          <description>The value to write.</description>
        </word>
      </params>
    </command>
    <!-- This command's got the same name like 0F, !but the params aren't the same! -->
    <!-- originally this command's called "setbyte2" -->
    <command>
      <id>10</id>
      <name>setbank</name>
      <description>Sets the specified script bank to value.</description>
      <params>
        <bank>
          <name>destination</name>
          <description>The bank to write byte to.</description>
        </bank>
        <byte>
          <name>value</name>
          <description>The value to write.</description>
        </byte>
      </params>
    </command>
    <!-- originally this command's called "writebytetooffset" -->
    <command>
      <id>11</id>
      <name>writebyte</name>
      <description>Sets the byte at offset to value.</description>
      <params>
        <byte>
          <name>value</name>
          <description>The value to write.</description>
        </byte>
        <word>
          <name>offset</name>
          <description>The offset to write byte to.</description>
        </word>
      </params>
    </command>
    <command>
      <id>12</id>
      <name>loadbytefrompointer</name>
      <description>Copies the byte value at source into the specified script bank.</description>
      <params>
        <bank>
          <name>destination</name>
          <description>The bank to write the byte to.</description>
        </bank>
        <word>
          <name>source</name>
          <description>Offset to read least-significant byte from.</description>
        </word>
      </params>
    </command>
    <!-- needs to be researched -->
    <command>
      <id>13</id>
      <name>setfarbyte</name>
      <description>Not sure. Judging from XSE's description I think it takes the least-significant byte in bank source and writes it to destination.</description>
      <params>
        <bank>
          <name>source</name>
          <description>Bank to read least-significant byte from.</description>
        </bank>
        <word>
          <name>destination</name>
          <description>Offset to write byte to.</description>
        </word>
      </params>
    </command>
    <!-- originally this command's called "copyscriptbanks" -->
    <!-- I would recommend "copy" as the command's name -->
    <command>
      <id>14</id>
      <name>copyscriptbank</name>
      <description>Copies the contents of bank source into bank destination.</description>
      <params>
        <bank>
          <name>destination</name>
          <description>Bank to write value to.</description>
        </bank>
        <bank>
          <name>source</name>
          <description>Bank to read value from.</description>
        </bank>
      </params>
    </command>
    <command>
      <id>15</id>
      <name>copybyte</name>
      <description>Copies the byte at source to destination.</description>
      <params>
        <word>
          <name>destination</name>
          <description>Offset to write byte to.</description>
        </word>
        <word>
          <name>source</name>
          <description>Offset to read byte from.</description>
        </word>
      </params>
    </command>
    <command>
      <id>16</id>
      <name>setvar</name>
      <description>Changes the value of destination to value.</description>
      <params>
        <var>
          <name>destination</name>
          <description>Variable to write value to.</description>
        </var>
        <hword>
          <name>value</name>
          <description>Value to write.</description>
        </hword>
      </params>
    </command>
    <!-- needs to be researched -->
    <command>
      <id>17</id>
      <name>addvar</name>
      <description>Changes the value of destination by adding value to it. Overflow is not prevented (0xFFFF + 1 = 0x0000).</description>
      <params>
        <var>
          <name>destination</name>
          <description>Variable to add value to.</description>
        </var>
        <hword>
          <name>value</name>
          <description>Value to add.</description>
        </hword>
      </params>
    </command>
    <command>
      <id>18</id>
      <name>subvar</name>
      <description>Changes the value of destination by subtracting value to it. Overflow is not prevented (0x0000 - 1 = 0xFFFF).</description>
      <params>
        <var>
          <name>destination</name>
          <description>Variable to subtract value from.</description>
        </var>
        <hwordvar>
          <name>value</name>
          <description>Value to subtract.</description>
        </hwordvar>
      </params>
    </command>
    <command>
      <id>19</id>
      <name>copyvar</name>
      <description>Copies the value of source into destination-</description>
      <params>
        <var>
          <name>destination</name>
          <description>Variable to write source-value to.</description>
        </var>
        <var>
          <name>source</name>
          <description>Variable to read value from.</description>
        </var>
      </params>
    </command>
    <!-- originally this command's called "copyvarifnotzero" -->
    <command>
      <id>1A</id>
      <name>trycopyvar</name>
      <description>
        If source is not a variable, then this function acts like <see id="16">setvar</see>. Otherwise, it acts like <see id="19">copyvar</see>.
      </description>
      <params>
        <var>
          <name>destination</name>
          <description>Variable to write value to.</description>
        </var>
        <!-- can be interpreted as a variable or an hword -->
        <hwordvar>
          <name>value</name>
          <description>Value to copy.</description>
        </hwordvar>
      </params>
    </command>
    <!-- I highly recommend to create a param-type called "bank" in order to create multiple commands called "compare" which got different params. -->
    <command>
      <id>1B</id>
      <name>comparebanks</name>
      <description>Compares the values of script banks x and y, after forcing the values to bytes.</description>
      <params>
        <bank>
          <name>x</name>
          <description>Bank to compare.</description>
        </bank>
        <bank>
          <name>y</name>
          <description>Bank to compare.</description>
        </bank>
      </params>
    </command>
    <!-- Could also be renamed to "compare" -->
    <command>
      <id>1C</id>
      <name>comparebanktobyte</name>
      <description>Compares the least-significant byte of the value of script bank x to a fixed byte value y.</description>
      <params>
        <bank>
          <name>x</name>
          <description>Bank to compare.</description>
        </bank>
        <byte>
          <name>y</name>
          <description>Byte to compare.</description>
        </byte>
      </params>
    </command>
    <!-- same thing here -->
    <command>
      <id>1D</id>
      <name>comparebanktofarbyte</name>
      <description>Compares the least-significant byte of the value of script bank x to the byte located at offset y.</description>
      <params>
        <bank>
          <name>x</name>
          <description>Bank to read least-significant byte from to compare.</description>
        </bank>
        <word>
          <name>y</name>
          <description>Offset to read byte from to compare.</description>
        </word>
      </params>
    </command>
    <!-- ...and over... -->
    <command>
      <id>1E</id>
      <name>comparefarbytetobank</name>
      <description>Compares the byte located at offset x to the least-significant byte of the value of script bank y.</description>
      <params>
        <word>
          <name>x</name>
          <description>Offset to read byte from to compare.</description>
        </word>
        <bank>
          <name>y</name>
          <description>Bank to read least-significant byte from to compare.</description>
        </bank>
      </params>
    </command>
    <!-- ...and over... -->
    <command>
      <id>1F</id>
      <name>comparefarbytetobyte</name>
      <description>Compares the byte located at offset x to a fixed byte value (y).</description>
      <params>
        <word>
          <name>x</name>
          <description>Offset to read byte from to compare.</description>
        </word>
        <byte>
          <name>y</name>
          <description>Byte to compare.</description>
        </byte>
      </params>
    </command>
    <!-- ...aaaaaaaaaaand over... -->
    <command>
      <id>20</id>
      <name>comparefarbytes</name>
      <description>Compares the byte located at offset x to the byte located at offset y.</description>
      <params>
        <word>
          <name>x</name>
          <description>Offset to read byte from to compare.</description>
        </word>
        <word>
          <name>y</name>
          <description>Offset to read byte from to compare.</description>
        </word>
      </params>
    </command>
    <!-- ...aaaaaaaaaaaaaaaaaaaand over... -->
    <command>
      <id>21</id>
      <name>compare</name>
      <description>Compares the value of x to a fixed word value (y).</description>
      <params>
        <var>
          <name>x</name>
          <description>Variable to compare.</description>
        </var>
        <hword>
          <name>y</name>
          <description>Value to compare.</description>
        </hword>
      </params>
    </command>
    <!-- ...and over again! -->
    <command>
      <id>22</id>
      <name>comparevars</name>
      <description>Compares the value of x to the value of y.</description>
      <params>
        <var>
          <name>x</name>
          <description>Variable to compare.</description>
        </var>
        <var>
          <name>y</name>
          <description>Variable to compare.</description>
        </var>
      </params>
    </command>
    <!-- originally this command's called "callasm" -->
    <command>
      <id>23</id>
      <name>asm</name>
      <description>Calls the ASM routine stored at code. Script execution is blocked until the ASM returns (bx lr, mov pc, lr, etc.). Remember to add 1 to the offset when calling THUMB code.</description>
      <params>
        <asm>
          <name>code</name>
          <description>The pointer which points at the asm-code</description>
        </asm>
      </params>
    </command>
    <!-- needs to be researched -->
    <command>
      <id>24</id>
      <name>cmd24</name>
      <description>
        Replaces a pointer in the script engine RAM with asm_pointer.

        (The pointer points to a THUMB routine... What effect does replacing it have?)
      </description>
      <params>
        <asm>
          <name>asm_pointer</name>
          <description>A pointer which points at an asm-code.</description>
        </asm>
      </params>
    </command>
    <command>
      <id>25</id>
      <name>special</name>
      <description>
        Calls a special function; that is, a piece of ASM code designed for use by scripts and listed in a table of pointers.

        The special table is located at 0x0815FD60.
      </description>
      <params>
        <hword>
          <name>function</name>
          <description>Index of the special function to call.</description>
        </hword>
      </params>
    </command>
    <!-- could also be renamed to "special" -->
    <command>
      <id>26</id>
      <name>special2</name>
      <description>Calls a special function. That function's output (if any) will be written to the variable you specify.</description>
      <params>
        <var>
          <name>output</name>
          <description>The variable to which the special function's output will be written.</description>
        </var>
        <hword>
          <name>function</name>
          <description>Index of the special function to call.</description>
        </hword>
      </params>
    </command>
    <command>
      <id>27</id>
      <name>waitstate</name>
      <description>Blocks script execution until a command or ASM code manually unblocks it. Generally used with specific commands and specials. If this command runs, and a subsequent command or piece of ASM does not unblock state, the script will remain blocked indefinitely (essentially a hang).</description>
      <params></params>
    </command>
    <!-- needs to be researched -->
    <command>
      <id>28</id>
      <name>pause</name>
      <description>
        Blocks script execution for time (frames? milliseconds?).

        A value of 0x0010 represents the amount of time it takes for a walking NPC to move one tile (i.e. dec 16 pixels).
      </description>
      <params>
        <hword>
          <name>time</name>
          <description>The time to wait.</description>
        </hword>
      </params>
    </command>
    <command>
      <id>29</id>
      <name>setflag</name>
      <description>Sets x to true</description>
      <params>
        <flag>
          <name>x</name>
          <description>Flag to set.</description>
        </flag>
      </params>
    </command>
    <!-- originally this command's called "clearflag" -->
    <command>
      <id>2A</id>
      <name>unsetflag</name>
      <description>Sets x to false.</description>
      <params>
        <flag>
          <name>x</name>
          <description>Flag to unset.</description>
        </flag>
      </params>
    </command>
    <command>
      <id>2B</id>
      <name>checkflag</name>
      <description>Checks if x is true.</description>
      <params>
        <flag>
          <name>x</name>
          <description>Flag to check.</description>
        </flag>
      </params>
    </command>
    <!-- needs to be researched in R/S/S -->
    <command>
      <id>2C</id>
      <name>cmd2c</name>
      <description>In FireRed, this command is a nop.</description>
      <params></params>
    </command>
    <!-- needs to be researched in R/S/S -->
    <command>
      <id>2D</id>
      <name>chekdailyflags</name>
      <description>Unknown</description>
      <params></params>
    </command>
    <!-- needs to be researched in R/S/S-->
    <command>
      <id>2E</id>
      <name>resetvars</name>
      <description>Resets the values of variables 0x8000, 0x8001, and 0x8002. Related to RTC in RSE?</description>
      <params></params>
    </command>
    <command>
      <id>2F</id>
      <name>sound</name>
      <description>
        Plays the specified (soundNumber) sound. Only one sound may play at a time, with newer ones interrupting older ones.

        If you specify sound 0x0000, then all music will be muted. If you specify the number of a non-existent sound, no new sound will be played, and currently-playing sounds will not be interrupted. A comprehensive list of sound numbers may be found on <see href="http://www.pokecommunity.com/showpost.php?p=5610866&amp;postcount=3">PokeCommunity</see>.

        Note that when using older versions of VisualBoyAdvance, the sound channel used for this command (and, sometimes, in music) will be completely muted after loading from a savestate.
      </description>
      <params>
        <hword>
          <name>soundNumber</name>
          <description>The number of the sound to play.</description>
        </hword>
      </params>
    </command>
    <!--
      originally this command's called "checksound"
      needs to be researched a bit
    -->
    <command>
      <id>30</id>
      <name>waitsound</name>
      <description>
        Blocks script execution until the currently-playing <see id="2F">sound</see> finishes playing.

        (Does this also block until cries finish playing? The manner in which it's used by default scripts suggests that it might.)
      </description>
      <params></params>
    </command>
    <!-- needs to be researched -->
    <command>
      <id>31</id>
      <name>fanfare</name>
      <description>
        Plays the specified (fanfareNumber) fanfare.

        (Is it limited to one fanfare at a time, like sound?)
      </description>
      <params>
        <hwordvar>
          <name>fanfareNumber</name>
          <description>The number of the fanfare to play.</description>
        </hwordvar>
      </params>
    </command>
    <command>
      <id>32</id>
      <name>waitfanfare</name>
      <description>Blocks script execution until all currently-playing fanfares finish.</description>
      <params></params>
    </command>
    <!-- needs to be researched -->
    <command>
      <id>33</id>
      <name>playsong</name>
      <description>
        Plays the specified (songNumber) song. The byte is apparently supposed to be 0x00.

        (I need to test this command to see it has any quirks... And does it accept a variable?)
      </description>
      <params>
        <hword>
          <name>songNumber</name>
          <description>The number of the song to play.</description>
        </hword>
        <byte>
          <name>unknown</name>
          <description>unknown</description>
        </byte>
      </params>
    </command>
    <!-- needs to be researched -->
    <command>
      <id>34</id>
      <name>playsong2</name>
      <description>
        Plays the specified (songNumber) song.

        (I need to test this command to see it has any quirks... Among other things, it's failed to work for me in situations where playsong has worked. And does it accept a variable?)
      </description>
      <params>
        <hword>
          <name>songNumber</name>
          <description>The number of the song to play.</description>
        </hword>
      </params>
    </command>
    <!-- could also be renamed to "fade" -->
    <command>
      <id>35</id>
      <name>fadedefault</name>
      <description>
        Crossfades the currently-playing song into the map's default song.

        (I need to test this command to see it has any quirks...)
      </description>
      <params></params>
    </command>
    <!-- could also be renamed to "fade" -->
    <command>
      <id>36</id>
      <name>fadesong</name>
      <description>
        Crossfades the currently-playng song into the specified (songNumber) song.

        (I need to test this command to see it has any quirks... And does it accept a variable?)
      </description>
      <params>
        <hword>
          <name>songNumber</name>
          <description>The number of the song to play.</description>
        </hword>
      </params>
    </command>
    <!-- needs to be researched -->
    <command>
      <id>37</id>
      <name>fadeout</name>
      <description>
        Fades out the currently-playing song.

        (I need to test this command to see it has any quirks... And what unit of measurement is used for speed? And does it accept a variable?)
      </description>
      <params>
        <byte>
          <name>speed</name>
          <description>The amount of speed the song fades out.</description>
        </byte>
      </params>
    </command>
    <!-- needs to be researched -->
    <command>
      <id>38</id>
      <name>fadein</name>
      <description>
        Fades the currently-playing song back in.

        (I need to test this command to see it has any quirks... And what unit of measurement is used for speed? And does it accept a variable?)
      </description>
      <params>
        <byte>
          <name>speed</name>
          <description>The amount of speed the song fades in.</description>
        </byte>
      </params>
    </command>
    <!-- needs to be researched -->
    <command>
      <id>39</id>
      <name>warp</name>
      <description>
        Sends the player to Warp warp on Map bank.map. If the specified warp is 0xFF, then the player will instead be sent to (X, Y) on the map.

        This command will also play Sappy song 0x0009, but only if the bytes at 0x02031DD8 and 0x0203ADFA are not equal to 0x00 and 0x02, respectively.

        (Function terminates script execution?)
      </description>
      <params>
        <byte>
          <name>mapBank</name>
          <description>The map-bank to warp to.</description>
        </byte>
        <byte>

        </byte>
      </params>
    </command>
  </commands>
  <macros>
    <macro>
      <name>msgbox</name>
      <description>Displays a textbox</description>
      <template>
        setbank 0x00 {0}
        callstd {1}
      </template>
      <params>
        <text>
          <name>Textoffset</name>
          <description>The offset of the text to display</description>
        </text>
        <byte>
          <name>Boxmode</name>
          <description>The textbox mode to use.</description>
        </byte>
      </params>
    </macro>
  </macros>
</scripty>